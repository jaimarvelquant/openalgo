#!/bin/bash

# OpenAlgo to MarvelQuant Branding Replacement Script
# Story 2.1 - Phase 1 Text Replacement Automation
# 
# This script performs comprehensive text replacement across the codebase
# following a specific order to avoid conflicts and ensure accuracy.
#
# Replacement Order (CRITICAL - DO NOT CHANGE):
# 1. URLs (most specific)
# 2. Social media handles
# 3. Possessive forms
# 4. Package names
# 5. Standard text

set -e  # Exit on error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DRY_RUN=false
VERBOSE=false
BACKUP_DIR="backups/branding-$(date +%Y%m%d-%H%M%S)"
LOG_FILE="logs/replace-branding-$(date +%Y%m%d-%H%M%S).log"

# Counters
TOTAL_FILES=0
MODIFIED_FILES=0
TOTAL_REPLACEMENTS=0

# Print functions
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

OpenAlgo to MarvelQuant branding replacement script.

OPTIONS:
    --dry-run       Preview changes without modifying files
    --verbose       Show detailed output
    --help          Show this help message

EXAMPLES:
    $0 --dry-run                    # Preview changes
    $0                              # Execute replacement
    $0 --dry-run --verbose          # Preview with details

REPLACEMENT ORDER:
    1. URLs (marvelquant.com → marvelquant.com)
    2. Social media (@marvelquant → @marvelquant)
    3. Possessive (MarvelQuant's → MarvelQuant's)
    4. Package names (marvelquant → marvelquant)
    5. Standard text (OpenAlgo → MarvelQuant)

EOF
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            usage
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            ;;
    esac
done

# Create log directory
mkdir -p logs

# Log function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Initialize
print_header "OpenAlgo → MarvelQuant Branding Replacement"
if [ "$DRY_RUN" = true ]; then
    print_warning "DRY RUN MODE - No files will be modified"
fi
echo ""

log "Script started - Dry run: $DRY_RUN"

# Create backup directory if not dry run
if [ "$DRY_RUN" = false ]; then
    mkdir -p "$BACKUP_DIR"
    print_info "Backup directory: $BACKUP_DIR"
    log "Backup directory created: $BACKUP_DIR"
fi

# Define file patterns to include
INCLUDE_PATTERNS=(
    "*.py"
    "*.html"
    "*.js"
    "*.css"
    "*.md"
    "*.txt"
    "*.yaml"
    "*.yml"
    "*.json"
    "*.sh"
)

# Define directories to exclude
EXCLUDE_DIRS=(
    ".git"
    ".venv"
    "venv"
    "node_modules"
    "__pycache__"
    "*.pyc"
    ".pytest_cache"
    "backups"
    "logs"
    "static/favicon"
    "docs/bmad"
)

# Build find command
FIND_CMD="find . -type f \("
for i in "${!INCLUDE_PATTERNS[@]}"; do
    if [ $i -eq 0 ]; then
        FIND_CMD="$FIND_CMD -name '${INCLUDE_PATTERNS[$i]}'"
    else
        FIND_CMD="$FIND_CMD -o -name '${INCLUDE_PATTERNS[$i]}'"
    fi
done
FIND_CMD="$FIND_CMD \)"

for dir in "${EXCLUDE_DIRS[@]}"; do
    FIND_CMD="$FIND_CMD -not -path '*/$dir/*'"
done

# Get list of files
print_info "Scanning for files to process..."
FILES=$(eval $FIND_CMD)
TOTAL_FILES=$(echo "$FILES" | wc -l | tr -d ' ')
print_success "Found $TOTAL_FILES files to process"
log "Found $TOTAL_FILES files to process"
echo ""

# Replacement function
replace_in_file() {
    local file=$1
    local search=$2
    local replace=$3
    local description=$4
    
    # Check if file contains the search pattern
    if grep -q "$search" "$file" 2>/dev/null; then
        local count=$(grep -o "$search" "$file" | wc -l | tr -d ' ')
        
        if [ "$VERBOSE" = true ]; then
            print_info "  $description: $count occurrence(s) in $file"
        fi
        
        if [ "$DRY_RUN" = false ]; then
            # Create backup
            cp "$file" "$BACKUP_DIR/$(basename $file).bak"
            
            # Perform replacement (macOS compatible)
            if [[ "$OSTYPE" == "darwin"* ]]; then
                sed -i '' "s|$search|$replace|g" "$file"
            else
                sed -i "s|$search|$replace|g" "$file"
            fi
        fi
        
        TOTAL_REPLACEMENTS=$((TOTAL_REPLACEMENTS + count))
        return 0
    fi
    return 1
}

# Process files
print_header "Processing Files"

for file in $FILES; do
    file_modified=false
    
    # Skip binary files
    if file "$file" | grep -q "text"; then
        
        # REPLACEMENT ORDER (CRITICAL):
        
        # 1. URLs (most specific first)
        if replace_in_file "$file" "marvelquant\.in" "marvelquant.com" "URL"; then
            file_modified=true
        fi
        if replace_in_file "$file" "www\.marvelquant\.in" "www.marvelquant.com" "URL (www)"; then
            file_modified=true
        fi
        if replace_in_file "$file" "https://marvelquant\.in" "https://marvelquant.com" "URL (https)"; then
            file_modified=true
        fi
        if replace_in_file "$file" "http://marvelquant\.in" "http://marvelquant.com" "URL (http)"; then
            file_modified=true
        fi
        
        # 2. Social media handles
        if replace_in_file "$file" "@marvelquant" "@marvelquant" "Social media"; then
            file_modified=true
        fi
        
        # 3. Possessive forms
        if replace_in_file "$file" "MarvelQuant's" "MarvelQuant's" "Possessive"; then
            file_modified=true
        fi
        if replace_in_file "$file" "marvelquant's" "marvelquant's" "Possessive (lowercase)"; then
            file_modified=true
        fi
        
        # 4. Package names (lowercase)
        if replace_in_file "$file" "marvelquant" "marvelquant" "Package name"; then
            file_modified=true
        fi
        
        # 5. Standard text (title case)
        if replace_in_file "$file" "OpenAlgo" "MarvelQuant" "Standard"; then
            file_modified=true
        fi
        
        if [ "$file_modified" = true ]; then
            MODIFIED_FILES=$((MODIFIED_FILES + 1))
            if [ "$VERBOSE" = false ]; then
                print_success "Modified: $file"
            fi
        fi
    fi
done

echo ""
print_header "Summary"
echo -e "Total files scanned:    ${BLUE}$TOTAL_FILES${NC}"
echo -e "Files modified:         ${GREEN}$MODIFIED_FILES${NC}"
echo -e "Total replacements:     ${GREEN}$TOTAL_REPLACEMENTS${NC}"

if [ "$DRY_RUN" = true ]; then
    echo ""
    print_warning "DRY RUN COMPLETE - No files were actually modified"
    print_info "Run without --dry-run to apply changes"
else
    echo ""
    print_success "Branding replacement complete!"
    print_info "Backup location: $BACKUP_DIR"
    print_info "Log file: $LOG_FILE"
fi

log "Script completed - Modified files: $MODIFIED_FILES, Total replacements: $TOTAL_REPLACEMENTS"


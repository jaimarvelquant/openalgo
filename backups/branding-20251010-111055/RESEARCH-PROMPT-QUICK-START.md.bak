# Deep Research Prompt - Quick Start Guide

**Generated**: 2025-10-08  
**Research Prompt File**: `deep-research-prompt-marvelquant-integration-CONSTRAINED-2025-10-08.md`  
**Status**: Ready to Execute

---

## üéØ What You Have

A **comprehensive, 1,600+ line deep research prompt** specifically designed to gather actionable insights for integrating your backtesting system with OpenAlgo for live trading.

### Key Features

‚úÖ **Technology Stack Constrained**: All research MUST work with Flask + Tailwind CSS 4.1.14 + DaisyUI 5.1.27 + Vanilla JavaScript
‚úÖ **OpenAlgo Ecosystem Focused**: Emphasizes extending MarvelQuant's existing architecture
‚úÖ **AlgoBaba-Style API Design**: Name-based hierarchical API (NOT ID-based) following production-proven patterns
‚úÖ **Backtester Codebase Analysis**: Instructs AI to analyze your existing backtester repository
‚úÖ **Parameter Documentation**: Complete extraction of all parameters from btrun/util.py
‚úÖ **Data Loading Story Analysis**: Adaptation from Parquet files to real-time API data
‚úÖ **Configuration Versioning**: Safety mechanisms to prevent accidental live deployment of backtest configs
‚úÖ **Implementation-Ready**: Requests complete code examples, not pseudocode
‚úÖ **Version-Specific**: Targets exact versions (Tailwind 4.1.14, DaisyUI 5.1.27)
‚úÖ **Comprehensive Coverage**: 12 critical questions + 11 research areas
‚úÖ **Platform-Optimized**: Tips for ChatGPT, Gemini, Grok, Claude

---

## üöÄ Quick Start (5 Minutes)

### Step 1: Choose Your Platform

**Recommended: ChatGPT Deep Research**
- Best for analyzing GitHub repositories (OpenAlgo)
- Excellent at finding version-specific documentation
- Strong at providing complete code examples
- Query limits: 25-250/month (Plus vs Pro)

**Alternative: Gemini Deep Research**
- Good research plan generation
- Can refine plan before execution
- Available globally

**Alternative: Grok DeepSearch**
- Fast execution
- Good for recent examples (2024-2025)
- Query limits: 5/24hrs (Free), 30/2hrs (Premium)

### Step 2: Copy the Prompt

**File Location**: `/Users/maruth/projects/bmad/docs/deep-research-prompt-marvelquant-integration-CONSTRAINED-2025-10-08.md`

**What to Copy**: The ENTIRE file (1,600+ lines)

**Important Updates**:
- ‚úÖ **AlgoBaba-Style API**: Research will follow name-based hierarchical API design (NOT ID-based)
- ‚úÖ **Parameter Documentation**: Will extract all parameters from btrun/util.py
- ‚úÖ **Data Loading Analysis**: Will analyze Story 7.9 for adapting Parquet ‚Üí real-time API
- ‚úÖ **Configuration Versioning**: Will provide safety mechanisms for live vs backtest configs
- ‚úÖ **Repository Access**: ChatGPT Deep Research has direct access to private repository

### Step 3: Execute

1. Open your chosen AI research platform
2. Paste the entire prompt
3. Review research plan (if provided)
4. Verify it focuses on Flask + Tailwind + DaisyUI + Vanilla JS (NOT React/Vue)
5. Execute and wait 60-90 minutes

### Step 4: Save Results

- Export/save immediately (before query limits reset)
- Expected output: 25-35 pages of comprehensive research

---

## üéØ What the Research Will Deliver

### 1. Backtester Codebase Analysis
- Analysis of Portfolio Manager module (`app/pm/__init__.py`)
- **Parameter documentation from btrun/util.py** (complete reference guide)
- Configuration management system (Excel parsing)
- Strategy execution logic and interfaces
- Market data handling (Parquet files)
- **Data loading story analysis** (Story 7.9 - Parquet to real-time API adaptation)
- Integration point specifications with exact code locations

### 2. AlgoBaba-Style API Design
- Name-based hierarchical API endpoints (NOT ID-based)
- Case-insensitive routing with UPPER_SNAKE_CASE normalization
- Database schema with name-based primary keys
- Flask Blueprint implementation patterns
- Complete endpoint specifications following AlgoBaba conventions

### 3. OpenAlgo Integration Blueprint
- Complete file structure for portfolio manager Blueprint
- Flask Blueprint registration patterns
- Template organization and inheritance
- Authentication integration with OpenAlgo
- Working code examples

### 4. DaisyUI Component Library
- Collapse components for Portfolio ‚Üí Strategy ‚Üí Leg hierarchy
- Badge, modal, table, stat, button, alert components
- Complete HTML examples with Tailwind classes
- Responsive design patterns

### 5. Vanilla JavaScript Patterns
- EventSource (SSE) implementation with auto-reconnection
- Efficient DOM update patterns for 50-100 positions
- State management without frameworks
- Event handling and delegation
- Performance optimization techniques

### 6. Flask + SSE Architecture
- Complete SSE endpoint implementation
- JSON payload structure for real-time updates
- Connection lifecycle management
- Performance optimization for multiple clients

### 7. Configuration Versioning and Safety
- Semantic versioning strategy for configurations
- Mode validation (live vs backtest) with safety checks
- Configuration metadata structure with approval workflow
- Git tagging, branching, and deployment scripts
- Audit trail logging for configuration changes

### 8. Security and Compliance
- SEBI requirements for algorithmic trading (India)
- API key management patterns
- Audit trail requirements
- Data encryption strategies

### 9. Testing Strategy
- Paper trading validation (duration, criteria)
- Unit testing patterns for Flask
- Integration testing with OpenAlgo
- Load testing for real-time updates

### 10. Implementation Roadmap
- Phase 1: API layer (2 weeks)
- Phase 2: UI layer (2 weeks)
- Phase 3: Advanced features (2 weeks)
- Effort estimates and dependencies

---

## üîë 12 Critical Questions Answered

The research will provide definitive answers to:

1. ‚úÖ **What are the exact DaisyUI 5.1.27 component patterns for Portfolio ‚Üí Strategy ‚Üí Leg hierarchies?**
2. ‚úÖ **How can Vanilla JavaScript efficiently handle real-time P&L updates for 50-100 positions?**
3. ‚úÖ **What are proven SSE implementation patterns in Flask 2.x for financial data streaming?**
4. ‚úÖ **How do trading platforms implement "stop portfolio," "disable strategy," "close leg" controls?**
5. ‚úÖ **What responsive design patterns work best for hierarchical trading data on mobile?**
6. ‚úÖ **How should configuration validation be implemented in Excel ‚Üí JSON workflow?**
7. ‚úÖ **What are critical security and compliance requirements for live trading in India (SEBI)?**
8. ‚úÖ **What testing duration and criteria are recommended for paper trading validation?**
9. ‚úÖ **How should the AlgoBaba-style name-based API be implemented in Flask?**
10. ‚úÖ **What are all the parameters in btrun/util.py and how should they be integrated?**
11. ‚úÖ **How should data loading be adapted from Parquet files to real-time OpenAlgo API?**
12. ‚úÖ **How should configuration versioning prevent accidental live deployment of backtest configs?**

---

## ‚ö†Ô∏è Critical Constraints (Enforced Throughout)

**FIXED Technology Stack - DO NOT CHANGE:**
- Backend: Flask 2.x with Blueprints
- Frontend CSS: Tailwind CSS 4.1.14
- UI Components: DaisyUI 5.1.27
- Frontend JS: Vanilla JavaScript ES6+ (NO React/Vue/Angular)
- Database: SQLite 3.x
- Real-time: Server-Sent Events (SSE)

**Research Focus:**
- ‚úÖ "How to implement within our stack"
- ‚ùå "What stack should we use"

---

## üìã Post-Research Checklist

### Validate Results (2-3 hours)

**Technology Stack Compliance:**
- [ ] ALL recommendations work with Flask + Tailwind + DaisyUI + Vanilla JS
- [ ] NO React/Vue/Angular suggestions
- [ ] Code examples use correct versions (Tailwind 4.1.14, DaisyUI 5.1.27)
- [ ] Vanilla JavaScript syntax (no JSX, no framework syntax)

**OpenAlgo Compatibility:**
- [ ] Patterns match MarvelQuant's GitHub repository structure
- [ ] Blueprint patterns align with MarvelQuant's architecture
- [ ] Authentication patterns compatible with OpenAlgo
- [ ] UI patterns use MarvelQuant's existing components

**Source Verification:**
- [ ] Citations link to official documentation
- [ ] Version-specific information verified
- [ ] Trading platform examples cross-referenced
- [ ] SEBI compliance requirements validated

### Extract Actionable Insights (2-3 hours)

**Create Implementation Artifacts:**
1. **Architecture Decision Records (ADRs)**
   - Document key technology choices
   - Record trade-offs and alternatives
   - Note constraints and assumptions

2. **Component Library**
   - Extract DaisyUI component examples
   - Create reusable HTML templates
   - Document Tailwind class patterns

3. **Code Templates**
   - Flask Blueprint boilerplate
   - SSE endpoint template
   - Vanilla JS EventSource template
   - API endpoint templates

4. **Implementation Task List**
   - Break down into 2-week sprints
   - Assign effort estimates
   - Identify dependencies
   - Prioritize critical path

5. **Testing Checklist**
   - Unit test requirements
   - Integration test scenarios
   - Paper trading criteria
   - Load testing parameters

---

## üîÑ Follow-Up Research Topics

If gaps are identified, create focused follow-up prompts:

1. **DaisyUI Deep Dive**: "Provide 10 complete examples of DaisyUI 5.1.27 collapse components for hierarchical financial data"
2. **Flask SSE Optimization**: "How to optimize Flask Server-Sent Events for 100+ concurrent connections with code examples"
3. **Vanilla JS Performance**: "Advanced DOM update optimization patterns in Vanilla JavaScript for real-time trading data"
4. **SEBI Compliance**: "Complete SEBI algorithmic trading compliance checklist for India with regulation references"
5. **Mobile Optimization**: "Touch-optimized trading interface patterns using Tailwind CSS and DaisyUI"

---

## üí° Pro Tips

### For Best Results

‚úÖ **Use ChatGPT Deep Research** for most comprehensive output  
‚úÖ **Review research plan** before execution (verify Flask/Tailwind/DaisyUI focus)  
‚úÖ **Answer clarifying questions** thoroughly  
‚úÖ **Save results immediately** before query limits reset  
‚úÖ **Cross-reference findings** with official documentation

### Common Pitfalls to Avoid

‚ùå **Don't accept React/Vue suggestions** - redirect to Vanilla JS  
‚ùå **Don't use outdated versions** - verify Tailwind 4.1.14, DaisyUI 5.1.27  
‚ùå **Don't skip validation** - test code examples for syntax errors  
‚ùå **Don't ignore OpenAlgo patterns** - align with existing architecture

---

## üìä Expected Timeline

| Phase | Duration | Activity |
|-------|----------|----------|
| **Research Execution** | 60-90 min | AI platform processes prompt |
| **Results Validation** | 2-3 hours | Verify compliance, sources, code |
| **Extract Insights** | 2-3 hours | Create ADRs, templates, task list |
| **Implementation Planning** | 1-2 days | Detailed sprint planning |
| **Total** | 2-3 days | From research to implementation plan |

---

## üéØ Success Criteria

**Research is successful if it provides:**

1. ‚úÖ Immediately implementable solutions (developers can start coding)
2. ‚úÖ Complete code examples (Flask, Vanilla JS, DaisyUI - not pseudocode)
3. ‚úÖ 100% technology stack compliance (Flask + Tailwind + DaisyUI + Vanilla JS)
4. ‚úÖ OpenAlgo integration guidance (specific patterns for extending)
5. ‚úÖ Version-specific information (Tailwind 4.1.14, DaisyUI 5.1.27)
6. ‚úÖ Real-world examples (trading platforms using similar stacks)
7. ‚úÖ Security and compliance (SEBI requirements)
8. ‚úÖ Testing guidance (paper trading criteria, load testing)
9. ‚úÖ Performance optimization (50-100 real-time positions)
10. ‚úÖ Responsive design (Tailwind breakpoints for all devices)

**Research FAILS if it:**

- ‚ùå Suggests React, Vue, Angular, or framework changes
- ‚ùå Provides pseudocode instead of complete examples
- ‚ùå Uses incorrect versions (e.g., Tailwind 3.x)
- ‚ùå Ignores MarvelQuant's existing architecture
- ‚ùå Provides generic advice without specifics
- ‚ùå Lacks citations and sources
- ‚ùå Misses security or compliance requirements
- ‚ùå Fails to answer the 8 critical questions

---

## üìû Next Steps

1. **Review the full prompt** (5 min)
   - Open: `deep-research-prompt-marvelquant-integration-CONSTRAINED-2025-10-08.md`
   - Verify all sections align with your needs

2. **Choose platform** (1 min)
   - Recommended: ChatGPT Deep Research
   - Alternative: Gemini, Grok, Claude Projects

3. **Execute research** (60-90 min)
   - Copy entire prompt
   - Paste into platform
   - Review plan, execute

4. **Validate results** (2-3 hours)
   - Check technology stack compliance
   - Verify OpenAlgo compatibility
   - Cross-reference sources

5. **Extract insights** (2-3 hours)
   - Create ADRs
   - Build component library
   - Generate task list

6. **Plan implementation** (1-2 days)
   - Sprint planning
   - Resource allocation
   - Risk management

---

## üìÅ File Locations

**Research Prompt**: `/Users/maruth/projects/bmad/docs/deep-research-prompt-marvelquant-integration-CONSTRAINED-2025-10-08.md`  
**Quick Start Guide**: `/Users/maruth/projects/bmad/docs/RESEARCH-PROMPT-QUICK-START.md` (this file)  
**Existing Documentation**: `/Users/maruth/projects/docs/bmad/live_integration/` (13 files)

---

**Ready to execute! üöÄ**

Copy the research prompt and paste it into ChatGPT Deep Research (or your chosen platform) to receive comprehensive, actionable insights for your Backtester ‚Üí OpenAlgo integration project.

